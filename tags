!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mk1122/.config/nvim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210627.0/
#	vimrcs/keymaps.vim	/^vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@\/<CR><CR>$/;"	m
$	vimrcs/keymaps.vim	/^nnoremap <silent> $ g\$$/;"	m
$FZF_DEFAULT_COMMAND	vimrcs/fzf.vim	/^let $FZF_DEFAULT_COMMAND = 'ag -g ""'$/;"	v
*	vimrcs/keymaps.vim	/^vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>\/<C-R>=@\/<CR><CR>$/;"	m
++	vimrcs/nerdtree.vim	/^nmap ++ <plug>NERDCommenterToggle$/;"	m
++	vimrcs/nerdtree.vim	/^vmap ++ <plug>NERDCommenterToggle$/;"	m
.	vimrcs/keymaps.vim	/^vnoremap . :normal .<cr>$/;"	m
0	coc-settings.json	/^    "javascript",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
0	coc-settings.json	/^  "eslint.filetypes": ["javascript", "typescript", "typescriptreact", "javascriptreact", "typesc/;"	s	array:eslint.filetypes
1	coc-settings.json	/^    "typescript",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
1	coc-settings.json	/^  "eslint.filetypes": ["javascript", "typescript", "typescriptreact", "javascriptreact", "typesc/;"	s	array:eslint.filetypes
10	coc-settings.json	/^    "vue",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
11	coc-settings.json	/^    "jsx"$/;"	s	array:coc.preferences.formatOnSaveFiletypes
2	coc-settings.json	/^    "typescriptreact",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
2	coc-settings.json	/^  "eslint.filetypes": ["javascript", "typescript", "typescriptreact", "javascriptreact", "typesc/;"	s	array:eslint.filetypes
3	coc-settings.json	/^    "json",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
3	coc-settings.json	/^  "eslint.filetypes": ["javascript", "typescript", "typescriptreact", "javascriptreact", "typesc/;"	s	array:eslint.filetypes
4	coc-settings.json	/^    "javascriptreact",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
4	coc-settings.json	/^  "eslint.filetypes": ["javascript", "typescript", "typescriptreact", "javascriptreact", "typesc/;"	s	array:eslint.filetypes
5	coc-settings.json	/^    "typescript.tsx",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
6	coc-settings.json	/^    "css",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
7	coc-settings.json	/^    "html",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
8	coc-settings.json	/^    "markdown",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
9	coc-settings.json	/^    "php",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
<A-h>	vimrcs/keymaps.vim	/^nnoremap <A-h> <C-w>h$/;"	m
<A-j>	vimrcs/keymaps.vim	/^nnoremap <A-j> <C-w>j$/;"	m
<A-k>	vimrcs/keymaps.vim	/^nnoremap <A-k> <C-w>k$/;"	m
<A-l>	vimrcs/keymaps.vim	/^nnoremap <A-l> <C-w>l$/;"	m
<C-b>	vimrcs/nerdtree.vim	/^nnoremap <silent> <C-b> :NERDTreeToggle<CR>$/;"	m
<C-c>	vimrcs/keymaps.vim	/^vnoremap <C-c> "*y$/;"	m
<C-d>	vimrcs/coc.vim	/^nmap <silent> <C-d> <Plug>(coc-range-select)$/;"	m
<C-d>	vimrcs/coc.vim	/^xmap <silent> <C-d> <Plug>(coc-range-select)$/;"	m
<C-d>	vimrcs/keymaps.vim	/^map <silent> <C-d> <S-y>p$/;"	m
<C-e>	vimrcs/keymaps.vim	/^nnoremap <C-e> 3<C-e>$/;"	m
<C-i>	vimrcs/keymaps.vim	/^map <silent> <C-i> :Buffers<cr>$/;"	m
<C-j>	vimrcs/keymaps.vim	/^imap <C-j> <Plug>(coc-snippets-expand-jump)$/;"	m
<C-j>	vimrcs/keymaps.vim	/^inoremap <C-j> <ESC>:m .+1<CR>==gi$/;"	m
<C-j>	vimrcs/keymaps.vim	/^nnoremap <C-j> :m .+1<CR>==$/;"	m
<C-j>	vimrcs/keymaps.vim	/^vmap <C-j> <Plug>(coc-snippets-select)$/;"	m
<C-j>	vimrcs/keymaps.vim	/^vnoremap <C-j> :m '>+1<CR>gv=gv$/;"	m
<C-k>	vimrcs/keymaps.vim	/^inoremap <C-k> <ESC>:m .-2<CR>==gi$/;"	m
<C-k>	vimrcs/keymaps.vim	/^nnoremap <C-k> :m .-2<CR>==$/;"	m
<C-k>	vimrcs/keymaps.vim	/^vnoremap <C-k> :m '<-2<CR>gv=gv$/;"	m
<C-l>	vimrcs/keymaps.vim	/^imap <C-l> <Plug>(coc-snippets-expand)$/;"	m
<C-p>	vimrcs/fzf.vim	/^nnoremap <C-p> :FZF<CR>$/;"	m
<C-y>	vimrcs/keymaps.vim	/^nnoremap <C-y> 3<C-y>$/;"	m
<F2>	vimrcs/coc.vim	/^nmap <F2> <Plug>(coc-rename)$/;"	m
<Leader>L	vimrcs/easymotion.vim	/^map <Leader>L <Plug>(easymotion-bd-jk)$/;"	m
<Leader>L	vimrcs/easymotion.vim	/^nmap <Leader>L <Plug>(easymotion-overwin-line)$/;"	m
<Leader>a	vimrcs/keymaps.vim	/^nnoremap <Leader>a :Ack!<Space>$/;"	m
<Leader>m	vimrcs/keymaps.vim	/^noremap <Leader>m mmHmt:%s\/<C-V><cr>\/\/ge<cr>'tzt'm$/;"	m
<Leader>n	vimrcs/nerdtree.vim	/^map <Leader>n <plug>NERDTreeTabsToggle<CR>$/;"	m
<Leader>r	vimrcs/easymotion.vim	/^map  <Leader>r <Plug>(easymotion-bd-w)$/;"	m
<Leader>r	vimrcs/easymotion.vim	/^nmap <Leader>r <Plug>(easymotion-overwin-w)$/;"	m
<Leader>tl	vimrcs/keymaps.vim	/^nmap <Leader>tl :exe "tabn ".g:lasttab<CR>$/;"	m
<Leader>vs	vimrcs/keymaps.vim	/^nnoremap <Leader>vs :so %<CR>$/;"	m
<Leader>z	vimrcs/easymotion.vim	/^map  <Leader>z <Plug>(easymotion-bd-f)$/;"	m
<Leader>z	vimrcs/easymotion.vim	/^nmap <Leader>z <Plug>(easymotion-overwin-f)$/;"	m
<S-Left>	vimrcs/keymaps.vim	/^map <silent> <S-Left> <C-o><Plug>CamelCaseMotion_b$/;"	m
<S-Right>	vimrcs/keymaps.vim	/^imap <silent> <S-Right> <C-o><Plug>CamelCaseMotion_w$/;"	m
<S-TAB>	vimrcs/coc.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	vimrcs/coc.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<c-n>	vimrcs/functions.vim	/^nnoremap <c-n> :call OpenTerminal()<CR>$/;"	m
<c-space>	vimrcs/coc.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<cr>	vimrcs/coc.vim	/^  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<cr>	vimrcs/coc.vim	/^  inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader>.	vimrcs/keymaps.vim	/^nmap <leader>. <c-^>$/;"	m
<leader>/	vimrcs/keymaps.vim	/^nnoremap <leader>\/ "fyiw :\/<c-r>f<cr>$/;"	m
<leader><cr>	vimrcs/keymaps.vim	/^noremap <leader><cr> :set hlsearch! hlsearch?<cr>$/;"	m
<leader>[	vimrcs/keymaps.vim	/^nmap <leader>[ <<$/;"	m
<leader>[	vimrcs/keymaps.vim	/^vmap <leader>[ <gv$/;"	m
<leader>]	vimrcs/keymaps.vim	/^nmap <leader>] >>$/;"	m
<leader>]	vimrcs/keymaps.vim	/^vmap <leader>] >gv$/;"	m
<leader>a	vimrcs/coc.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>a	vimrcs/coc.vim	/^xmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	vimrcs/coc.vim	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>cd	vimrcs/keymaps.vim	/^map <leader>cd :cd %:p:h<cr>:pwd<cr>"$/;"	m
<leader>eg	vimrcs/keymaps.vim	/^map <leader>eg :e! ~\/.gitconfig<cr>$/;"	m
<leader>ep	vimrcs/keymaps.vim	/^   map <leader>ep :e! ~\/AppData\/Local\/nvim\/01_plugins.vim<cr>$/;"	m
<leader>ep	vimrcs/keymaps.vim	/^  map <leader>ep :e! ~\/.config\/nvim\/vimrcs\/01_plugins.vim<cr>$/;"	m
<leader>ev	vimrcs/keymaps.vim	/^   map <leader>ev :e! ~\/AppData\/Local\/nvim\/init.vim<cr>$/;"	m
<leader>ev	vimrcs/keymaps.vim	/^  map <leader>ev :e! ~\/.config\/nvim\/init.vim<cr>$/;"	m
<leader>ex	vimrcs/keymaps.vim	/^   map <leader>ex :e! ~\/AppData\/Local\/nvim\/<cr>$/;"	m
<leader>ex	vimrcs/keymaps.vim	/^  map <leader>ex :e! ~\/.config\/nvim\/<cr>$/;"	m
<leader>f	vimrcs/keymaps.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>f	vimrcs/keymaps.vim	/^xmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>ga	vimrcs/keymaps.vim	/^nnoremap <leader>ga :Gcommit --amend<CR>$/;"	m
<leader>gb	vimrcs/keymaps.vim	/^nnoremap <leader>gb :Git branch<Space>$/;"	m
<leader>gc	vimrcs/keymaps.vim	/^nnoremap <leader>gc :Gcommit -v -q<CR>$/;"	m
<leader>gd	vimrcs/keymaps.vim	/^nnoremap <leader>gd :Gdiff<CR>$/;"	m
<leader>ge	vimrcs/keymaps.vim	/^nnoremap <leader>ge :Gedit<CR>$/;"	m
<leader>gl	vimrcs/keymaps.vim	/^nnoremap <leader>gl :silent! Glog<CR>$/;"	m
<leader>gm	vimrcs/keymaps.vim	/^nnoremap <leader>gm :Gmove<Space>$/;"	m
<leader>go	vimrcs/keymaps.vim	/^nnoremap <leader>go :Git checkout<Space>$/;"	m
<leader>gp	vimrcs/keymaps.vim	/^nnoremap <leader>gp :Ggrep<Space>$/;"	m
<leader>gpl	vimrcs/keymaps.vim	/^nnoremap <leader>gpl :Dispatch! git pull<CR>$/;"	m
<leader>gps	vimrcs/keymaps.vim	/^nnoremap <leader>gps :Dispatch! git push<CR>$/;"	m
<leader>gr	vimrcs/keymaps.vim	/^nnoremap <leader>gr :Gread<CR>$/;"	m
<leader>gs	vimrcs/keymaps.vim	/^nnoremap <leader>gs :Gstatus<CR>$/;"	m
<leader>gt	vimrcs/keymaps.vim	/^nnoremap <leader>gt :Gcommit -v -q %<CR>$/;"	m
<leader>gw	vimrcs/keymaps.vim	/^nnoremap <leader>gw :Gwrite<CR><CR>$/;"	m
<leader>h	vimrcs/keymaps.vim	/^nmap <silent> <leader>h :wincmd h<CR>$/;"	m
<leader>i	vimrcs/keymaps.vim	/^nnoremap <leader>i :set cursorline!<cr>$/;"	m
<leader>j	vimrcs/keymaps.vim	/^nmap <silent> <leader>j :wincmd j<CR>$/;"	m
<leader>k	vimrcs/keymaps.vim	/^nmap <silent> <leader>k :wincmd k<CR>$/;"	m
<leader>l	vimrcs/keymaps.vim	/^nmap <silent> <leader>l :wincmd l<CR>$/;"	m
<leader>md	vimrcs/keymaps.vim	/^nmap <leader>md :%!markdown --html4tags <cr>$/;"	m
<leader>o	vimrcs/keymaps.vim	/^map <leader>o :BufExplorer<cr>$/;"	m
<leader>pv	vimrcs/nerdtree.vim	/^nnoremap <leader>pv :NERDTreeFind<bar> :vertical resize 45<CR>$/;"	m
<leader>qf	vimrcs/coc.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>r	vimrcs/keymaps.vim	/^vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>$/;"	m
<leader>rn	vimrcs/coc.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>t<leader>	vimrcs/keymaps.vim	/^map <leader>t<leader> :tabnext$/;"	m
<leader>tc	vimrcs/keymaps.vim	/^map <leader>tc :tabclose<cr>$/;"	m
<leader>te	vimrcs/keymaps.vim	/^map <leader>te :tabedit <C-r>=expand("%:p:h")<cr>\/$/;"	m
<leader>tm	vimrcs/keymaps.vim	/^map <leader>tm :tabmove$/;"	m
<leader>tn	vimrcs/keymaps.vim	/^map <leader>tn :tabnew<cr>$/;"	m
<leader>to	vimrcs/keymaps.vim	/^map <leader>to :tabonly<cr>$/;"	m
<leader>w	vimrcs/keymaps.vim	/^nmap <leader>w :w<cr>$/;"	m
<leader>wc	vimrcs/keymaps.vim	/^map <leader>wc :wincmd q<cr>$/;"	m
<leader>x	vimrcs/keymaps.vim	/^xmap <leader>x  <Plug>(coc-convert-snippet)$/;"	m
<plug>(plug-preview)	autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
<space>a	vimrcs/coc.vim	/^nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<space>c	vimrcs/coc.vim	/^nnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>e	vimrcs/coc.vim	/^nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>j	vimrcs/coc.vim	/^nnoremap <silent> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>k	vimrcs/coc.vim	/^nnoremap <silent> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>o	vimrcs/coc.vim	/^nnoremap <silent> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>p	vimrcs/coc.vim	/^nnoremap <silent> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>s	vimrcs/coc.vim	/^nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
CmdLine	vimrcs/functions.vim	/^function! CmdLine(str)$/;"	f
CocCurrentFunction	vimrcs/functions.vim	/^function! CocCurrentFunction()$/;"	f
D	autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
FZF Commands	README.md	/^## FZF Commands$/;"	s	chapter:Nvim minimal Settings
Features	README.md	/^## Features$/;"	s	chapter:Nvim minimal Settings
FilenameForLightline	vimrcs/functions.vim	/^function! FilenameForLightline()$/;"	f
Fold	vimrcs/coc.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	vimrcs/coc.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
Install Instructions	README.md	/^## Install Instructions$/;"	s	chapter:Nvim minimal Settings
Installed Plugins	README.md	/^## Installed Plugins$/;"	s	chapter:Nvim minimal Settings
K	vimrcs/coc.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
L	autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
Linux	README.md	/^### Linux$/;"	S	section:Nvim minimal Settings""Install Instructions
Not included	README.md	/^## Not included$/;"	s	chapter:Nvim minimal Settings
Nvim minimal Settings	README.md	/^# Nvim minimal Settings$/;"	c
OR	vimrcs/coc.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
OpenTerminal	vimrcs/functions.vim	/^function! OpenTerminal()$/;"	f
Plug	autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
R	autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
S	autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
SourceDirectory	init.vim	/^function! SourceDirectory(file)$/;"	f
U	autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
VisualSelection	vimrcs/functions.vim	/^function! VisualSelection(direction, extra_filter) range$/;"	f
Windows	README.md	/^### Windows$/;"	S	section:Nvim minimal Settings""Install Instructions
X	autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
[[	autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[g	vimrcs/coc.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
\\s	vimrcs/keymaps.vim	/^nmap \\s :set ts=4 sts=4 sw=4 et<cr>$/;"	m
\\t	vimrcs/keymaps.vim	/^nmap \\t :set ts=4 sts=4 sw=4 noet<cr>$/;"	m
]]	autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
]g	vimrcs/coc.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
^	vimrcs/keymaps.vim	/^nnoremap <silent> ^ g^$/;"	m
af	vimrcs/coc.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
af	vimrcs/coc.vim	/^xmap af <Plug>(coc-funcobj-a)$/;"	m
arrowParens	prettier.config.js	/^  arrowParens: 'avoid',$/;"	p	class:module.exports
b:ale_fixers	vimrcs/ale.vim	/^let b:ale_fixers = ['prettier', 'eslint']$/;"	v
b:ale_linter_aliases	ftplugin/vue.vim	/^let b:ale_linter_aliases = ['javascript', 'vue']$/;"	v
b:ale_linters	ftplugin/vue.vim	/^let b:ale_linters = ['eslint', 'vls']$/;"	v
coc.preferences.diagnostic.virtualText	coc-settings.json	/^  "coc.preferences.diagnostic.virtualText": true,$/;"	b
coc.preferences.formatOnSaveFiletypes	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": [$/;"	a
d	autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
dd	autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
diagnostic.displayByAle	coc-settings.json	/^  "diagnostic.displayByAle": true,$/;"	b
emmet.includeLanguages	coc-settings.json	/^  "emmet.includeLanguages": {"javascript": "javascriptreact"}$/;"	o
eslint.filetypes	coc-settings.json	/^  "eslint.filetypes": ["javascript", "typescript", "typescriptreact", "javascriptreact", "typesc/;"	a
exports	prettier.config.js	/^module.exports = {$/;"	c	class:module
filetypedetect	autoload/plug.vim	/^        augroup filetypedetect$/;"	a
g:NERDTreeExactMatchHighlightColor	vimrcs/nerdtree.vim	/^let g:NERDTreeExactMatchHighlightColor = {}$/;"	v
g:NERDTreeExactMatchHighlightColor	vimrcs/nerdtree.vim	/^let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange$/;"	v
g:NERDTreeExtensionHighlightColor	vimrcs/nerdtree.vim	/^let g:NERDTreeExtensionHighlightColor = {}$/;"	v
g:NERDTreeExtensionHighlightColor	vimrcs/nerdtree.vim	/^let g:NERDTreeExtensionHighlightColor['css'] = s:blue$/;"	v
g:NERDTreeGitStatusIndicatorMapCustom	vimrcs/nerdtree.vim	/^let g:NERDTreeGitStatusIndicatorMapCustom = {$/;"	v
g:NERDTreeHighlightFolders	vimrcs/nerdtree.vim	/^let g:NERDTreeHighlightFolders = 1$/;"	v
g:NERDTreeHighlightFoldersFullName	vimrcs/nerdtree.vim	/^let g:NERDTreeHighlightFoldersFullName = 1$/;"	v
g:NERDTreeIgnore	vimrcs/nerdtree.vim	/^let g:NERDTreeIgnore = ['^node_modules$'] " ignore node_modules to increase load speed$/;"	v
g:NERDTreeMinimalUI	vimrcs/nerdtree.vim	/^let g:NERDTreeMinimalUI = 1$/;"	v
g:NERDTreePatternMatchHighlightColor	vimrcs/nerdtree.vim	/^let g:NERDTreePatternMatchHighlightColor = {}$/;"	v
g:NERDTreePatternMatchHighlightColor	vimrcs/nerdtree.vim	/^let g:NERDTreePatternMatchHighlightColor['.*_spec\\.rb$'] = s:rspec_red$/;"	v
g:NERDTreeShowHidden	vimrcs/nerdtree.vim	/^let g:NERDTreeShowHidden = 1$/;"	v
g:NERDTreeStatusline	vimrcs/nerdtree.vim	/^let g:NERDTreeStatusline = '' "set to empty to use lightline$/;"	v
g:UltiSnipsEditSplit	vimrcs/ultisnips.vim	/^let g:UltiSnipsEditSplit="vertical"$/;"	v
g:UltiSnipsExpandTrigger	vimrcs/ultisnips.vim	/^let g:UltiSnipsExpandTrigger="<tab>"$/;"	v
g:UltiSnipsJumpForwardTrigger	vimrcs/ultisnips.vim	/^let g:UltiSnipsJumpForwardTrigger="<c-j>"$/;"	v
g:UltiSnipsJumpForwardTrigger	vimrcs/ultisnips.vim	/^let g:UltiSnipsJumpForwardTrigger="<c-k>"$/;"	v
g:WebDevIconsDefaultFileSymbolColor	vimrcs/nerdtree.vim	/^let g:WebDevIconsDefaultFileSymbolColor = s:blue$/;"	v
g:WebDevIconsDefaultFolderSymbolColor	vimrcs/nerdtree.vim	/^let g:WebDevIconsDefaultFolderSymbolColor = s:beige$/;"	v
g:_plug_bang	autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:ackhighlight	vimrcs/ack.vim	/^let g:ackhighlight = 1                              " hightlight matches$/;"	v
g:ackprg	vimrcs/ack.vim	/^let g:ackprg = 'ag --nogroup --nocolor --column'    " Ag support$/;"	v
g:airline#extensions#ale#enabled	vimrcs/ale.vim	/^let g:airline#extensions#ale#enabled = 1$/;"	v
g:ale_completion_autoimport	vimrcs/ale.vim	/^let g:ale_completion_autoimport = 1$/;"	v
g:ale_fix_on_save	vimrcs/ale.vim	/^let g:ale_fix_on_save = 1$/;"	v
g:ale_fixers	vimrcs/ale.vim	/^let g:ale_fixers = {$/;"	v
g:ale_lint_on_enter	vimrcs/ale.vim	/^let g:ale_lint_on_enter = 0$/;"	v
g:ale_lint_on_text_changed	vimrcs/ale.vim	/^let g:ale_lint_on_text_changed = 'never'$/;"	v
g:ale_linters	vimrcs/ale.vim	/^let g:ale_linters = {$/;"	v
g:ale_php_phpcbf_standard	vimrcs/ale.vim	/^let g:ale_php_phpcbf_standard='PSR2'$/;"	v
g:ale_php_phpcs_standard	vimrcs/ale.vim	/^let g:ale_php_phpcs_standard='PSR2'$/;"	v
g:ale_set_highlights	vimrcs/ale.vim	/^let g:ale_set_highlights = 1$/;"	v
g:ale_sign_error	vimrcs/ale.vim	/^let g:ale_sign_error = '❌'$/;"	v
g:ale_sign_warning	vimrcs/ale.vim	/^let g:ale_sign_warning = '⚠️'$/;"	v
g:blade_custom_directives	vimrcs/blade.vim	/^let g:blade_custom_directives = ['datetime', 'javascript', 'csrf']$/;"	v
g:blade_custom_directives_pairs	vimrcs/blade.vim	/^let g:blade_custom_directives_pairs = {$/;"	v
g:bookmark_auto_save	vimrcs/bookmark.vim	/^let g:bookmark_auto_save = 1$/;"	v
g:bookmark_highlight_lines	vimrcs/bookmark.vim	/^let g:bookmark_highlight_lines = 1$/;"	v
g:bookmark_no_default_key_mappings	vimrcs/bookmark.vim	/^let g:bookmark_no_default_key_mappings = 1$/;"	v
g:bookmark_save_per_working_dir	vimrcs/bookmark.vim	/^let g:bookmark_save_per_working_dir = 1$/;"	v
g:bookmark_sign	vimrcs/bookmark.vim	/^let g:bookmark_sign = '♥'$/;"	v
g:coc_global_extensions	vimrcs/01_plugins.vim	/^let g:coc_global_extensions = ['coc-tslint-plugin', 'coc-emmet', 'coc-css', 'coc-html', 'coc-jso/;"	v
g:coc_global_extensions	vimrcs/coc.vim	/^let g:coc_global_extensions = [$/;"	v
g:coc_snippet_next	vimrcs/coc.vim	/^let g:coc_snippet_next = '<c-j>'$/;"	v
g:coc_snippet_prev	vimrcs/coc.vim	/^let g:coc_snippet_prev = '<c-k>'$/;"	v
g:coc_user_config	vimrcs/coc.vim	/^let g:coc_user_config = {}$/;"	v
g:colors_name	colors/toast.vim	/^let g:colors_name = "toast"$/;"	v
g:fzf_action	vimrcs/fzf.vim	/^let g:fzf_action = {$/;"	v
g:indentLine_char_list	vimrcs/indentline.vim	/^let g:indentLine_char_list = ['|', '¦', '┆', '┊']$/;"	v
g:indentLine_setColors	vimrcs/indentline.vim	/^let g:indentLine_setColors = 0$/;"	v
g:lasttab	vimrcs/keymaps.vim	/^let g:lasttab = 1$/;"	v
g:lightline	vimrcs/lightline.vim	/^let g:lightline = {$/;"	v
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:matchparen_insert_timeout	vimrcs/basics.vim	/^let g:matchparen_insert_timeout = 2$/;"	v
g:matchparen_timeout	vimrcs/basics.vim	/^let g:matchparen_timeout = 2$/;"	v
g:plug_home	autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:prettier#autoformat	backup/prettier.vim	/^let g:prettier#autoformat = 0$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^    let g:terminal_ansi_colors[0]  = "#1e2d38"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^    let g:terminal_ansi_colors[0]  = "#323434"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^    let g:terminal_ansi_colors[15] = "#b9cbda"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^    let g:terminal_ansi_colors[15] = "#f4f3ef"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^    let g:terminal_ansi_colors[7]  = "#acc1d3"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^    let g:terminal_ansi_colors[7]  = "#e4e2d8"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^    let g:terminal_ansi_colors[8]  = "#253846"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^    let g:terminal_ansi_colors[8]  = "#4f4a36"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors = repeat([0], 16)$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors[10] = "#7dc030"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors[11] = "#ffc233"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors[12] = "#5aa2e0"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors[13] = "#b968d9"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors[14] = "#15c1bb"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors[1]  = "#D12D00"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors[2]  = "#427B00"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors[3]  = "#B68200"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors[4]  = "#006fd1"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors[5]  = "#a53bce"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors[6]  = "#119c97"$/;"	v
g:terminal_ansi_colors	colors/toast.vim	/^  let g:terminal_ansi_colors[9]  = "#E74D23"$/;"	v
g:terminal_color_0	colors/toast.vim	/^    let g:terminal_color_0  = "#1e2d38"$/;"	v
g:terminal_color_0	colors/toast.vim	/^    let g:terminal_color_0  = "#323434"$/;"	v
g:terminal_color_1	colors/toast.vim	/^  let g:terminal_color_1  = "#D12D00"$/;"	v
g:terminal_color_10	colors/toast.vim	/^  let g:terminal_color_10 = "#7dc030"$/;"	v
g:terminal_color_11	colors/toast.vim	/^  let g:terminal_color_11 = "#ffc233"$/;"	v
g:terminal_color_12	colors/toast.vim	/^  let g:terminal_color_12 = "#5aa2e0"$/;"	v
g:terminal_color_13	colors/toast.vim	/^  let g:terminal_color_13 = "#b968d9"$/;"	v
g:terminal_color_14	colors/toast.vim	/^  let g:terminal_color_14 = "#15c1bb"$/;"	v
g:terminal_color_15	colors/toast.vim	/^    let g:terminal_color_15 = "#b9cbda"$/;"	v
g:terminal_color_15	colors/toast.vim	/^    let g:terminal_color_15 = "#f4f3ef"$/;"	v
g:terminal_color_2	colors/toast.vim	/^  let g:terminal_color_2  = "#427B00"$/;"	v
g:terminal_color_3	colors/toast.vim	/^  let g:terminal_color_3  = "#B68200"$/;"	v
g:terminal_color_4	colors/toast.vim	/^  let g:terminal_color_4  = "#006fd1"$/;"	v
g:terminal_color_5	colors/toast.vim	/^  let g:terminal_color_5  = "#a53bce"$/;"	v
g:terminal_color_6	colors/toast.vim	/^  let g:terminal_color_6  = "#119c97"$/;"	v
g:terminal_color_7	colors/toast.vim	/^    let g:terminal_color_7  = "#acc1d3"$/;"	v
g:terminal_color_7	colors/toast.vim	/^    let g:terminal_color_7  = "#e4e2d8"$/;"	v
g:terminal_color_8	colors/toast.vim	/^    let g:terminal_color_8  = "#253846"$/;"	v
g:terminal_color_8	colors/toast.vim	/^    let g:terminal_color_8  = "#4f4a36"$/;"	v
g:terminal_color_9	colors/toast.vim	/^  let g:terminal_color_9  = "#E74D23"$/;"	v
g:user_emmet_leader_key	vimrcs/basics.vim	/^let g:user_emmet_leader_key=','$/;"	v
g:vim_json_syntax_conceal	vimrcs/indentline.vim	/^let g:vim_json_syntax_conceal = 0$/;"	v
gd	vimrcs/coc.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
ge	vimrcs/coc.vim	/^nmap ge :CocCommand explorer<CR>$/;"	m
gi	vimrcs/coc.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gp	backup/prettier.vim	/^nnoremap gp :silent %!prettier --stdin-filepath %<CR>$/;"	m
gr	vimrcs/coc.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	vimrcs/coc.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
ib	vimrcs/keymaps.vim	/^omap <silent> ib <Plug>CamelCaseMotion_ib$/;"	m
ib	vimrcs/keymaps.vim	/^xmap <silent> ib <Plug>CamelCaseMotion_ib$/;"	m
ie	vimrcs/keymaps.vim	/^omap <silent> ie <Plug>CamelCaseMotion_ie$/;"	m
ie	vimrcs/keymaps.vim	/^xmap <silent> ie <Plug>CamelCaseMotion_ie$/;"	m
if	vimrcs/coc.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
if	vimrcs/coc.vim	/^xmap if <Plug>(coc-funcobj-i)$/;"	m
iw	vimrcs/keymaps.vim	/^omap <silent> iw <Plug>CamelCaseMotion_iw$/;"	m
iw	vimrcs/keymaps.vim	/^xmap <silent> iw <Plug>CamelCaseMotion_iw$/;"	m
j	vimrcs/keymaps.vim	/^nnoremap <silent> j gj$/;"	m
javascript	coc-settings.json	/^  "emmet.includeLanguages": {"javascript": "javascriptreact"}$/;"	s	object:emmet.includeLanguages
jk	vimrcs/keymaps.vim	/^inoremap jk <Esc>$/;"	m
k	vimrcs/keymaps.vim	/^nnoremap <silent> k gk$/;"	m
mapleader	vimrcs/keymaps.vim	/^let mapleader = "\\<space>"$/;"	v
mc	vimrcs/bookmark.vim	/^nmap mc   <Plug>BookmarkClear$/;"	m
mg	vimrcs/bookmark.vim	/^nmap mg   <Plug>BookmarkMoveToLine$/;"	m
mi	vimrcs/bookmark.vim	/^nmap mi   <Plug>BookmarkAnnotate$/;"	m
mj	vimrcs/bookmark.vim	/^nmap mj   <Plug>BookmarkNext$/;"	m
mjj	vimrcs/bookmark.vim	/^nmap mjj  <Plug>BookmarkMoveDown$/;"	m
mk	vimrcs/bookmark.vim	/^nmap mk   <Plug>BookmarkPrev$/;"	m
mkk	vimrcs/bookmark.vim	/^nmap mkk  <Plug>BookmarkMoveUp$/;"	m
mm	vimrcs/bookmark.vim	/^nmap mm   <Plug>BookmarkToggle$/;"	m
mx	vimrcs/bookmark.vim	/^nmap mx   <Plug>BookmarkClearAll$/;"	m
mygroup	vimrcs/coc.vim	/^augroup mygroup$/;"	a
o	autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
printWidth	prettier.config.js	/^  printWidth: 120,$/;"	p	class:module.exports
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :call <SID>close_pane()<cr>$/;"	m
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
q:	vimrcs/keymaps.vim	/^nnoremap q: <ESC>$/;"	m
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:aqua	vimrcs/nerdtree.vim	/^let s:aqua =  "3AFFDB"$/;"	v
s:ask	autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	autoload/plug.vim	/^function! s:bar()$/;"	f
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': '', 'frozen': 0 }$/;"	v
s:batchfile	autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
s:beige	vimrcs/nerdtree.vim	/^let s:beige = "F5C06F"$/;"	v
s:bg	colors/toast.vim	/^  let s:bg=s:black$/;"	v
s:bg	colors/toast.vim	/^  let s:bg=s:white$/;"	v
s:black	colors/toast.vim	/^  let s:black = ["#17222b", 234]$/;"	v
s:black	colors/toast.vim	/^  let s:black = ["#323434", 16]$/;"	v
s:blue	colors/toast.vim	/^  let s:blue    = ["#006fd1", 26]$/;"	v
s:blue	colors/toast.vim	/^  let s:blue    = ["#5aa2e0", 74]$/;"	v
s:blue	vimrcs/nerdtree.vim	/^let s:blue = "689FB6"$/;"	v
s:brown	vimrcs/nerdtree.vim	/^let s:brown = "905532"$/;"	v
s:check_back_space	vimrcs/coc.vim	/^function! s:check_back_space() abort$/;"	f
s:check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:close_pane	autoload/plug.vim	/^function! s:close_pane()$/;"	f
s:compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:constant	colors/toast.vim	/^  let s:constant   = s:red$/;"	v
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cyan	colors/toast.vim	/^  let s:cyan    = ["#119c97", 36]$/;"	v
s:cyan	colors/toast.vim	/^  let s:cyan    = ["#15c1bb", 37]$/;"	v
s:darkBlue	vimrcs/nerdtree.vim	/^let s:darkBlue = "44788E"$/;"	v
s:darkOrange	vimrcs/nerdtree.vim	/^let s:darkOrange = "F16529"$/;"	v
s:darkgray	colors/toast.vim	/^  let s:darkgray        = ["#1e2d38", 235]$/;"	v
s:darkgray	colors/toast.vim	/^  let s:darkgray        = ["#423e2e", 16]$/;"	v
s:define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:delete	autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:delete_op	autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:diff	autoload/plug.vim	/^function! s:diff()$/;"	f
s:dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:fg	colors/toast.vim	/^  let s:fg=s:black$/;"	v
s:fg	colors/toast.vim	/^  let s:fg=s:white$/;"	v
s:find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:git_dir	autoload/plug.vim	/^function! s:git_dir(dir) abort$/;"	f
s:git_local_branch	autoload/plug.vim	/^function! s:git_local_branch(dir) abort$/;"	f
s:git_orange	vimrcs/nerdtree.vim	/^let s:git_orange = 'F54D27'$/;"	v
s:git_origin_branch	autoload/plug.vim	/^function! s:git_origin_branch(spec)$/;"	f
s:git_origin_url	autoload/plug.vim	/^function! s:git_origin_url(dir) abort$/;"	f
s:git_revision	autoload/plug.vim	/^function! s:git_revision(dir) abort$/;"	f
s:git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:grayfour	colors/toast.vim	/^  let s:grayfour=s:lightgray$/;"	v
s:grayfour	colors/toast.vim	/^  let s:grayfour=s:mediumdarkgray$/;"	v
s:graymid	colors/toast.vim	/^let s:graymid=s:mediumgray$/;"	v
s:grayone	colors/toast.vim	/^  let s:grayone=s:darkgray$/;"	v
s:grayone	colors/toast.vim	/^  let s:grayone=s:lightgray$/;"	v
s:graythree	colors/toast.vim	/^  let s:graythree=s:mediumdarkgray$/;"	v
s:graythree	colors/toast.vim	/^  let s:graythree=s:mediumlightgray$/;"	v
s:graytwo	colors/toast.vim	/^  let s:graytwo=s:mediumdarkgray$/;"	v
s:graytwo	colors/toast.vim	/^  let s:graytwo=s:mediumlightgray$/;"	v
s:green	colors/toast.vim	/^  let s:green   = ["#427B00", 28]$/;"	v
s:green	colors/toast.vim	/^  let s:green   = ["#7dc030", 106]$/;"	v
s:green	vimrcs/nerdtree.vim	/^let s:green = "8FAA54"$/;"	v
s:hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:hl	colors/toast.vim	/^function! s:hl(...)$/;"	f
s:identifier	colors/toast.vim	/^  let s:identifier = s:yellow$/;"	v
s:infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_powershell	autoload/plug.vim	/^function! s:is_powershell(shell)$/;"	f
s:is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:isabsolute	autoload/plug.vim	/^function! s:isabsolute(dir) abort$/;"	f
s:job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_cb	autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_exit_cb	autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_out_cb	autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:last_non_empty_line	autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lazy	autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
s:lightGreen	vimrcs/nerdtree.vim	/^let s:lightGreen = "31B53E"$/;"	v
s:lightPurple	vimrcs/nerdtree.vim	/^let s:lightPurple = "834F79"$/;"	v
s:lightgray	colors/toast.vim	/^  let s:lightgray       = ["#b9cbda", 152]$/;"	v
s:lightgray	colors/toast.vim	/^  let s:lightgray       = ["#eae8e1", 188]$/;"	v
s:lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:load_plugin	autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:magenta	colors/toast.vim	/^  let s:magenta = ["#a53bce", 128]$/;"	v
s:magenta	colors/toast.vim	/^  let s:magenta = ["#b968d9", 134]$/;"	v
s:me	autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:mediumdarkgray	colors/toast.vim	/^  let s:mediumdarkgray  = ["#253846", 236]$/;"	v
s:mediumdarkgray	colors/toast.vim	/^  let s:mediumdarkgray  = ["#4f4a36", 52]$/;"	v
s:mediumgray	colors/toast.vim	/^  let s:mediumgray      = ["#547d9c", 242]$/;"	v
s:mediumgray	colors/toast.vim	/^  let s:mediumgray      = ["#7f7757", 101]$/;"	v
s:mediumlightgray	colors/toast.vim	/^  let s:mediumlightgray = ["#acc1d3", 146]$/;"	v
s:mediumlightgray	colors/toast.vim	/^  let s:mediumlightgray = ["#e4e2d8", 188]$/;"	v
s:names	autoload/plug.vim	/^function! s:names(...)$/;"	f
s:new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
s:none	colors/toast.vim	/^let s:none = ["NONE", "NONE"]$/;"	v
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim_cb	autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:orange	vimrcs/nerdtree.vim	/^let s:orange = "D4843E"$/;"	v
s:parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:pink	vimrcs/nerdtree.vim	/^let s:pink = "CB6F6F"$/;"	v
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_call	autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
s:plug_expand	autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
s:plug_fnamemodify	autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
s:plug_getcwd	autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_tempname	autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
s:plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:preproc	colors/toast.vim	/^  let s:preproc    = s:magenta$/;"	v
s:preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:purple	vimrcs/nerdtree.vim	/^let s:purple = "834F79"$/;"	v
s:reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:red	colors/toast.vim	/^  let s:red     = ["#D12D00", 160]$/;"	v
s:red	colors/toast.vim	/^  let s:red     = ["#E74D23", 166]$/;"	v
s:red	vimrcs/nerdtree.vim	/^let s:red = "AE403F"$/;"	v
s:regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reload_plugins	autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:retry	autoload/plug.vim	/^function! s:retry()$/;"	f
s:revert	autoload/plug.vim	/^function! s:revert()$/;"	f
s:rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rspec_red	vimrcs/nerdtree.vim	/^let s:rspec_red = 'FE405F'$/;"	v
s:rtp	autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
s:salmon	vimrcs/nerdtree.vim	/^let s:salmon = "EE6E73"$/;"	v
s:section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:shellesc_cmd	autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
s:shellesc_ps1	autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
s:shellesc_sh	autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
s:show_documentation	vimrcs/coc.vim	/^function! s:show_documentation()$/;"	f
s:snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:special	colors/toast.vim	/^  let s:special    = s:cyan$/;"	v
s:special	colors/toast.vim	/^  let s:special    = s:green$/;"	v
s:split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:statement	colors/toast.vim	/^  let s:statement  = s:blue$/;"	v
s:statement	colors/toast.vim	/^  let s:statement  = s:cyan$/;"	v
s:status	autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
s:system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:tick	autoload/plug.vim	/^function! s:tick()$/;"	f
s:to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:trueblue	colors/toast.vim	/^let s:trueblue    = s:blue$/;"	v
s:truecyan	colors/toast.vim	/^let s:truecyan    = s:cyan$/;"	v
s:truegreen	colors/toast.vim	/^let s:truegreen   = s:green$/;"	v
s:truemagenta	colors/toast.vim	/^let s:truemagenta = s:magenta$/;"	v
s:truered	colors/toast.vim	/^let s:truered     = s:red$/;"	v
s:trueyellow	colors/toast.vim	/^let s:trueyellow  = s:yellow$/;"	v
s:type	colors/toast.vim	/^  let s:type       = s:blue$/;"	v
s:type	colors/toast.vim	/^  let s:type       = s:green$/;"	v
s:update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:vim8	autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:white	colors/toast.vim	/^  let s:white = ["#c3d2df", 188]$/;"	v
s:white	colors/toast.vim	/^  let s:white = ["#f4f3ef", 231]$/;"	v
s:white	vimrcs/nerdtree.vim	/^let s:white = "FFFFFF"$/;"	v
s:with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
s:wrap_cmds	autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:yellow	colors/toast.vim	/^  let s:yellow  = ["#B68200", 136]$/;"	v
s:yellow	colors/toast.vim	/^  let s:yellow  = ["#ffc233", 214]$/;"	v
s:yellow	vimrcs/nerdtree.vim	/^let s:yellow = "F09F17"$/;"	v
semi	prettier.config.js	/^  semi: false,$/;"	p	class:module.exports
singleQuote	prettier.config.js	/^  singleQuote: true,$/;"	p	class:module.exports
tabWidth	prettier.config.js	/^  tabWidth: 2,$/;"	p	class:module.exports
td	vimrcs/keymaps.vim	/^nnoremap td  :tabclose<CR>$/;"	m
th	vimrcs/keymaps.vim	/^nnoremap th  :tabfirst<CR>$/;"	m
tj	vimrcs/keymaps.vim	/^nnoremap tj  :tabprev<CR>$/;"	m
tk	vimrcs/keymaps.vim	/^nnoremap tk  :tabnext<CR>$/;"	m
tl	vimrcs/keymaps.vim	/^nnoremap tl  :tablast<CR>$/;"	m
tm	vimrcs/keymaps.vim	/^nnoremap tm  :tabm<Space>$/;"	m
tn	vimrcs/keymaps.vim	/^nnoremap tn  :tabnext<Space>$/;"	m
trailingComma	prettier.config.js	/^  trailingComma: 'es5',$/;"	p	class:module.exports
tt	vimrcs/keymaps.vim	/^nnoremap tt  :tabedit<Space>$/;"	m
vueIndentScriptAndStyle	prettier.config.js	/^  vueIndentScriptAndStyle: true,$/;"	p	class:module.exports
z	vimrcs/easymotion.vim	/^nmap z <Plug>(easymotion-overwin-f2)$/;"	m
